[{"/Users/shannonclarke/Documents/Developer/webstart/tutorials/todo-app01/src/reportWebVitals.js":"1","/Users/shannonclarke/Documents/Developer/webstart/tutorials/todo-app01/src/App.js":"2"},{"size":362,"mtime":1606997428110,"results":"3","hashOfConfig":"4"},{"size":2508,"mtime":1607043441679,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"dg05ud",{"filePath":"8","messages":"9","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"10"},"/Users/shannonclarke/Documents/Developer/webstart/tutorials/todo-app01/src/reportWebVitals.js",[],"/Users/shannonclarke/Documents/Developer/webstart/tutorials/todo-app01/src/App.js",["11"],"\nimport { useState, useEffect } from 'react'\nimport './App.css';\n\nconst App = () => {\n\n  const [title, setTitle] = useState('')\n  const [tasks, setTasks] = useState([])\n\n  useEffect(() => {\n    //Check if localstorage is\n    const storedTasks = JSON.parse(window.localStorage.getItem('tasks'))\n    console.log(storedTasks)\n    if (storedTasks?.length > 0) {\n      setTasks(storedTasks)\n    }\n  }, [])\n\n  //UseEffect re-renders application whenever dependency objects are changed\n  useEffect(() => {\n\n    //Save to localstorage whenever tasks is updated\n    if (tasks.length > 0) {\n      console.log('save tasks to localstorage')\n      window.localStorage.setItem('tasks', JSON.stringify(tasks))\n    }\n\n  }, [tasks])\n\n  //Update the state object whenever the field is changed\n  const handleFieldChange = (e) => {\n    const { value } = e.target\n    // console.log(value)\n    setTitle(value)\n  }\n\n  //Handles saving to the tasks array\n  const handleSubmit = () => {\n    console.log('handle submit', title)\n    //TODO: Why didn't it re-render when creating the temp container??\n    // console.log(...tasks)\n    setTasks([...tasks, title])\n    setTitle('')\n  }\n\n  const handleEdit = (todoIndex) => {\n    //TODO: Edit todo using the es6 find\n    // console.log(tasks.findIndex((item, index) => todoIndex === index))\n    const replaceIndex = tasks.findIndex((item, index) => todoIndex === index)\n    tasks[replaceIndex] += \" edited\"\n    // console.log(tasks)\n    setTasks([...tasks])\n  }\n\n  const handleSave = (index) => {\n    console.log('handle save')\n  }\n\n  const handleRemove = () => {\n    //TODO: Remove todo using es6 filter\n  }\n\n  return (\n    <div className=\"App\">\n      <div>\n        <input\n          type='text'\n          name=\"task_title\"\n          value={title}\n          placeholder=\"Add task here\"\n          onChange={handleFieldChange}\n        />\n        <button type=\"button\"\n          onClick={handleSubmit}>\n          Add task\n          </button>\n      </div>\n\n      <ul style={{ listStyle: 'none' }}>\n        {tasks?.length > 0 ? tasks.map((item, index) => (\n          <li\n            style={{ display: 'flex', justifyContent: 'space-between' }}\n            key={index}\n          >\n            {item}\n            <div>\n              <button type=\"button\" onClick={() => handleEdit(index)}>Edit</button>\n              <button type=\"button\" onClick={handleRemove}>Delete</button>\n            </div>\n          </li>\n        )) : \"Nothing in list\"}\n      </ul>\n    </div>\n  );\n}\n\nexport default App;\n",{"ruleId":"12","severity":1,"message":"13","line":55,"column":9,"nodeType":"14","messageId":"15","endLine":55,"endColumn":19},"no-unused-vars","'handleSave' is assigned a value but never used.","Identifier","unusedVar"]